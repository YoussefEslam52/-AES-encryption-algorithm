from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64
import os

class AESCipher:
    def __init__(self, key_length=256):
        """
        Initializes a new AESCipher object with a random AES key of the specified length (in bits).
        """
        self.key = os.urandom(key_length // 8)

    def encrypt(self, plaintext):
        """
        Encrypts the given plaintext using AES encryption with the object's key.
        Returns the ciphertext and initialization vector (IV) as base64-encoded strings.
        """
        # Generate a random IV
        iv = os.urandom(AES.block_size)

        # Create an AES cipher object with the key and IV
        cipher = AES.new(self.key, AES.MODE_CBC, iv)

        # Pad the plaintext to a multiple of 16 bytes
        padded_plaintext = pad(plaintext.encode('utf-8'), AES.block_size)

        # Encrypt the padded plaintext using the cipher object
        ciphertext = cipher.encrypt(padded_plaintext)

        # Encode the ciphertext and IV as base64 for transmission
        encoded_ciphertext = base64.b64encode(ciphertext).decode('utf-8')
        encoded_iv = base64.b64encode(iv).decode('utf-8')

        return encoded_ciphertext, encoded_iv

    def decrypt(self, encoded_ciphertext, encoded_iv):
        """
        Decrypts the given ciphertext using AES decryption with the object's key and the specified IV.
        Returns the plaintext as a string.
        """
        # Decode the encoded ciphertext and IV from base64
        ciphertext = base64.b64decode(encoded_ciphertext)
        iv = base64.b64decode(encoded_iv)

        # Create an AES cipher object with the key and IV
        cipher = AES.new(self.key, AES.MODE_CBC, iv)

        # Decrypt the ciphertext using the cipher object
        padded_plaintext = cipher.decrypt(ciphertext)

        # Unpad the decrypted plaintext
        plaintext = unpad(padded_plaintext, AES.block_size).decode('utf-8')

        return plaintext

# Example usage
cipher = AESCipher()
plaintext = "This is some plaintext to encrypt."

# Encrypt the plaintext using the cipher object
ciphertext, iv = cipher.encrypt(plaintext)

# Decrypt the ciphertext using the cipher object and the IV
decrypted_plaintext = cipher.decrypt(ciphertext, iv)

print("Key: ", cipher.key.hex())
print("Plaintext: ", plaintext)
print("Ciphertext: ", ciphertext)
print("IV: ", iv)
print("Decrypted plaintext: ", decrypted_plaintext)
